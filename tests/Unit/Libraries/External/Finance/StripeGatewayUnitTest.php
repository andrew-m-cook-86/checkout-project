<?php

declare(strict_types=1);

namespace Tests\Unit\Libraries\External\Finance;

use App\Libraries\External\Finance\StripeGateway;
use App\Models\Currency;
use App\Models\Instruction;
use App\Models\Vendor;
use Faker\Factory;
use Illuminate\Config\Repository;
use PHPUnit\Framework\TestCase;
use Stripe\ApiResource;
use Stripe\Transfer;
use Mockery as m;

class StripeGatewayUnitTest  extends TestCase
{

    public function setUp(): void
    {
        $this->transferMock = m::mock(Transfer::class);
        $this->configMock = m::mock(Repository::class);
        $this->instructionMock = m::mock(Instruction::class);
        $this->stripeGateway = new StripeGateway(
            $this->transferMock,
            $this->configMock,
            $this->instructionMock

        );

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * @test
     * @group unit
     * @return void
     */
    public function it_should_check_exists()
    {
        $factoryMock = m::mock(Factory::class);
        $modelMock = m::mock(Instruction::class);
        $argumentMock = m::mock(Instruction::class);

        $this->configMock->shouldReceive('get')
            ->once()
            ->with('payment.providers.stripe.key')
            ->andReturn('pk_test');

        $this->instructionMock->shouldReceive('factory')
            ->once()
            ->andReturn($factoryMock);

        $factoryMock->shouldReceive('make')
            ->once()
            ->with(['user_id' => 99999])
            ->andReturn($modelMock);

        $modelMock->shouldReceive('getAttribute')
            ->once()
            ->with('transaction_id')
            ->andReturn('trans_id');

        $this->assertEquals('trans_id', $this->stripeGateway->transfer($argumentMock));
    }

    /**
     * @test
     * @group unit
     * @return void
     */
    public function it_should_retrieve_and_cast_to_float()
    {
        $argumentMock = m::mock(Instruction::class);

        $this->configMock->shouldReceive('get')
            ->twice()
            ->with('payment.providers.stripe.key')
            ->andReturn('pk_real');

        $this->assertNull($this->stripeGateway->transfer($argumentMock));
    }
}
