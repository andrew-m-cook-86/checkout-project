<?php

declare(strict_types=1);

namespace Tests\Unit\Libraries\Currency;

use AmrShawky\CurrencyFactory;
use App\Libraries\Currency\CurrencyBackoff;
use App\Libraries\Currency\CurrencyCache;
use App\Libraries\Currency\CurrencyConverter;
use PHPUnit\Framework\TestCase;
use Mockery as m;
use STS\Backoff\Backoff;

class CurrencyConverterUnitTest  extends TestCase
{
    /**
     * @var CurrencyCache
     */
    private $cacheManagerMock;

    /**
     * @var CurrencyFactory
     */
    private $currencyFactoryMock;

    /**
     * @var CurrencyBackoff
     */
    private $currencyBackoffMock;

    /**
     * @var CurrencyConverter
     */
    private $currencyConverter;

    public function setUp(): void
    {
        $this->cacheManagerMock = m::mock(CurrencyCache::class);
        $this->currencyFactoryMock = m::mock(CurrencyFactory::class);
        $this->currencyBackoffMock = m::mock(CurrencyBackoff::class);
        $this->currencyConverter = new CurrencyConverter(
            $this->cacheManagerMock,
            $this->currencyFactoryMock,
            $this->currencyBackoffMock
        );

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * @test
     * @group unit
     * @return void
     */
    public function it_should_return_cached_currency()
    {
        $this->cacheManagerMock->shouldReceive('generateKey')
            ->once()
            ->with(12345.67, 'from', 'to')
            ->andReturn('12345.67:from:to');

        $this->cacheManagerMock->shouldReceive('exists')
            ->once()
            ->with('12345.67:from:to')
            ->andReturnTrue();
        $this->cacheManagerMock->shouldReceive('retrieve')
            ->once()
            ->with('12345.67:from:to')
            ->andReturn(12345.67);
        $this->assertEquals(12345.67, $this->currencyConverter->convert(
            12345.67, 'from', 'to'
        ));
    }

    /**
     * @test
     * @group unit
     * @return void
     */
    public function it_should_convert_currency()
    {
        $from = 'from';
        $to = 'to';
        $amount = 12345.67;
        $currencyMock = $this->currencyFactoryMock;
        $backoffMock = m::mock(Backoff::class);

        $this->cacheManagerMock->shouldReceive('generateKey')
            ->once()
            ->with(12345.67, 'from', 'to')
            ->andReturn('12345.67:from:to');

        $this->cacheManagerMock->shouldReceive('exists')
            ->once()
            ->with('12345.67:from:to')
            ->andReturnFalse();

        $this->currencyBackoffMock->shouldReceive('instance')
            ->once()
            ->andReturn($backoffMock);

        $backoffMock->shouldReceive('run')->with(
            m::on(function() use ($from, $to, $amount, $currencyMock) {
                $currencyMock->shouldReceive('convert')
                    ->once()
                    ->andReturnSelf();
                $currencyMock->shouldReceive('from')
                    ->once()
                    ->with($from)
                    ->andReturnSelf();
                $currencyMock->shouldReceive('to')
                    ->once()
                    ->with($to)
                    ->andReturnSelf();
                $currencyMock->shouldReceive('amount')
                    ->once()
                    ->with($amount)
                    ->andReturnSelf();
                $currencyMock->shouldReceive('get')
                    ->once()
                    ->andReturn($amount);
                return true;
            })
        )->andReturn(12345.67);

        $this->cacheManagerMock->shouldReceive('cache')
            ->once()
            ->with(12345.67, '12345.67:from:to');

        $this->assertEquals(12345.67, $this->currencyConverter->convert(
            12345.67, 'from', 'to'
        ));
    }
}
